/*
 * generated by Xtext 2.34.0
 */
package dk.sdu.mmmi.mdsd.ui23.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Ui23GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class UIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.UI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleIDTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		private final Assignment cFormsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormsFormParserRuleCall_3_0 = (RuleCall)cFormsAssignment_3.eContents().get(0);
		
		//UI:
		//    'title' title=ID
		//    functions += Function*
		//    forms += Form*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'title' title=ID
		//functions += Function*
		//forms += Form*
		public Group getGroup() { return cGroup; }
		
		//'title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//title=ID
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//ID
		public RuleCall getTitleIDTerminalRuleCall_1_0() { return cTitleIDTerminalRuleCall_1_0; }
		
		//functions += Function*
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0() { return cFunctionsFunctionParserRuleCall_2_0; }
		
		//forms += Form*
		public Assignment getFormsAssignment_3() { return cFormsAssignment_3; }
		
		//Form
		public RuleCall getFormsFormParserRuleCall_3_0() { return cFormsFormParserRuleCall_3_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTypesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_3_1_1_0 = (RuleCall)cTypesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypesTypeParserRuleCall_6_0 = (RuleCall)cTypesAssignment_6.eContents().get(0);
		
		//Function:
		//    'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' types+=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' types+=Type
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(types+=Type (',' types+=Type)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0_0() { return cTypesTypeParserRuleCall_3_0_0; }
		
		//(',' types+=Type)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_3_1_1() { return cTypesAssignment_3_1_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_1_1_0() { return cTypesTypeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//types+=Type
		public Assignment getTypesAssignment_6() { return cTypesAssignment_6; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_6_0() { return cTypesTypeParserRuleCall_6_0; }
	}
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Form:
		//    'form' name=ID ('('(parameters+=Parameter (',' parameters+=Parameter)*)?')')? '{' layout=Layout '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'form' name=ID ('('(parameters+=Parameter (',' parameters+=Parameter)*)?')')? '{' layout=Layout '}'
		public Group getGroup() { return cGroup; }
		
		//'form'
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('('(parameters+=Parameter (',' parameters+=Parameter)*)?')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0_0() { return cParametersParameterParserRuleCall_2_1_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//layout=Layout
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_4_0() { return cLayoutLayoutParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRowKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cColumnKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentsComponentParserRuleCall_2_0 = (RuleCall)cComponentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Layout:
		//    ('row' | 'column') '{' components+=Component* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('row' | 'column') '{' components+=Component* '}'
		public Group getGroup() { return cGroup; }
		
		//('row' | 'column')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'row'
		public Keyword getRowKeyword_0_0() { return cRowKeyword_0_0; }
		
		//'column'
		public Keyword getColumnKeyword_0_1() { return cColumnKeyword_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//components+=Component*
		public Assignment getComponentsAssignment_2() { return cComponentsAssignment_2; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_2_0() { return cComponentsComponentParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFormUseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Component:
		//    Layout | Element | FormUse
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Layout | Element | FormUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Layout
		public RuleCall getLayoutParserRuleCall_0() { return cLayoutParserRuleCall_0; }
		
		//Element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }
		
		//FormUse
		public RuleCall getFormUseParserRuleCall_2() { return cFormUseParserRuleCall_2; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//    Label | InputText | Button
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Label | InputText | Button
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//InputText
		public RuleCall getInputTextParserRuleCall_1() { return cInputTextParserRuleCall_1; }
		
		//Button
		public RuleCall getButtonParserRuleCall_2() { return cButtonParserRuleCall_2; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Label:
		//    'label' ':' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'label' ':' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
	}
	public class InputTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.InputText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//InputText:
		//    'input' name=ID ':' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=ID ':' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_3_0() { return cExpExpParserRuleCall_3_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpExpParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		
		//Button:
		//    'button' '*'? name=ID ':' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'button' '*'? name=ID ':' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }
		
		//'*'?
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//exp=Exp
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_4_0() { return cExpExpParserRuleCall_4_0; }
	}
	public class FormUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.FormUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpExpParserRuleCall_2_0_0 = (RuleCall)cExpAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_2_1_1_0 = (RuleCall)cExpAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FormUse:
		//    name=ID '(' (exp=Exp (',' exp=Exp)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (exp=Exp (',' exp=Exp)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(exp=Exp (',' exp=Exp)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_2_0() { return cExpAssignment_2_0; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0_0() { return cExpExpParserRuleCall_2_0_0; }
		
		//(',' exp=Exp)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_2_1_1() { return cExpAssignment_2_1_1; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_1_1_0() { return cExpExpParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBoolTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStringKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNumberTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNumberKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Type:
		//    {BoolType} 'boolean' | {StringType} 'string' | {NumberType} 'number'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolType} 'boolean' | {StringType} 'string' | {NumberType} 'number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BoolType} 'boolean'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BoolType}
		public Action getBoolTypeAction_0_0() { return cBoolTypeAction_0_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }
		
		//{StringType} 'string'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringType}
		public Action getStringTypeAction_1_0() { return cStringTypeAction_1_0; }
		
		//'string'
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }
		
		//{NumberType} 'number'
		public Group getGroup_2() { return cGroup_2; }
		
		//{NumberType}
		public Action getNumberTypeAction_2_0() { return cNumberTypeAction_2_0; }
		
		//'number'
		public Keyword getNumberKeyword_2_1() { return cNumberKeyword_2_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cOrLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualityParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp returns Expression:
		//    Equality (( {And.left=current} '&&' | {Or.left=current}  '||' ) right=Equality)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality (( {And.left=current} '&&' | {Or.left=current}  '||' ) right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//(( {And.left=current} '&&' | {Or.left=current}  '||' ) right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {And.left=current} '&&' | {Or.left=current}  '||' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{And.left=current} '&&'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_0_0() { return cAndLeftAction_1_0_0_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_0_1() { return cAmpersandAmpersandKeyword_1_0_0_1; }
		
		//{Or.left=current}  '||'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0_1_0() { return cOrLeftAction_1_0_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1_1() { return cVerticalLineVerticalLineKeyword_1_0_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_1_0() { return cRightEqualityParserRuleCall_1_1_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEQLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cNEQLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Equality returns Expression:
		//    Compare (( {EQ.left=current} '==' | {NEQ.left=current}  '!=' ) right=Compare)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Compare (( {EQ.left=current} '==' | {NEQ.left=current}  '!=' ) right=Compare)*
		public Group getGroup() { return cGroup; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_0() { return cCompareParserRuleCall_0; }
		
		//(( {EQ.left=current} '==' | {NEQ.left=current}  '!=' ) right=Compare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {EQ.left=current} '==' | {NEQ.left=current}  '!=' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{EQ.left=current} '=='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{EQ.left=current}
		public Action getEQLeftAction_1_0_0_0() { return cEQLeftAction_1_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//{NEQ.left=current}  '!='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{NEQ.left=current}
		public Action getNEQLeftAction_1_0_1_0() { return cNEQLeftAction_1_0_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }
		
		//right=Compare
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Compare
		public RuleCall getRightCompareParserRuleCall_1_1_0() { return cRightCompareParserRuleCall_1_1_0; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcatParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cLTLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLTELeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cGTLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cGTELeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConcatParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Compare returns Expression:
		//    Concat ((
		//        {LT.left=current}  '<'  |
		//        {LTE.left=current} '<=' |
		//        {GT.left=current}  '>'  |
		//        {GTE.left=current} '>='
		//    ) right=Concat)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Concat ((
		//    {LT.left=current}  '<'  |
		//    {LTE.left=current} '<=' |
		//    {GT.left=current}  '>'  |
		//    {GTE.left=current} '>='
		//) right=Concat)*
		public Group getGroup() { return cGroup; }
		
		//Concat
		public RuleCall getConcatParserRuleCall_0() { return cConcatParserRuleCall_0; }
		
		//((
		//       {LT.left=current}  '<'  |
		//       {LTE.left=current} '<=' |
		//       {GT.left=current}  '>'  |
		//       {GTE.left=current} '>='
		//   ) right=Concat)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(
		//        {LT.left=current}  '<'  |
		//        {LTE.left=current} '<=' |
		//        {GT.left=current}  '>'  |
		//        {GTE.left=current} '>='
		//    )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{LT.left=current}  '<'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LT.left=current}
		public Action getLTLeftAction_1_0_0_0() { return cLTLeftAction_1_0_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0_1() { return cLessThanSignKeyword_1_0_0_1; }
		
		//{LTE.left=current} '<='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{LTE.left=current}
		public Action getLTELeftAction_1_0_1_0() { return cLTELeftAction_1_0_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_1() { return cLessThanSignEqualsSignKeyword_1_0_1_1; }
		
		//{GT.left=current}  '>'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{GT.left=current}
		public Action getGTLeftAction_1_0_2_0() { return cGTLeftAction_1_0_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_2_1() { return cGreaterThanSignKeyword_1_0_2_1; }
		
		//{GTE.left=current} '>='
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//{GTE.left=current}
		public Action getGTELeftAction_1_0_3_0() { return cGTELeftAction_1_0_3_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_3_1() { return cGreaterThanSignEqualsSignKeyword_1_0_3_1; }
		
		//right=Concat
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Concat
		public RuleCall getRightConcatParserRuleCall_1_1_0() { return cRightConcatParserRuleCall_1_1_0; }
	}
	public class ConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Concat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cConcLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAddMinusParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Concat returns Expression:
		//    AddMinus (( {Conc.left=current} '&') right=AddMinus)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AddMinus (( {Conc.left=current} '&') right=AddMinus)*
		public Group getGroup() { return cGroup; }
		
		//AddMinus
		public RuleCall getAddMinusParserRuleCall_0() { return cAddMinusParserRuleCall_0; }
		
		//(( {Conc.left=current} '&') right=AddMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Conc.left=current} '&')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Conc.left=current}
		public Action getConcLeftAction_1_0_0() { return cConcLeftAction_1_0_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_1() { return cAmpersandKeyword_1_0_1; }
		
		//right=AddMinus
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AddMinus
		public RuleCall getRightAddMinusParserRuleCall_1_1_0() { return cRightAddMinusParserRuleCall_1_1_0; }
	}
	public class AddMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.AddMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AddMinus returns Expression:
		//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Plus.left=current} '+' | {Minus.left=current}  '-' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current}  '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor returns Expression:
		//    Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mult.left=current} '*' | {Div.left=current}  '/'  )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mult.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_0() { return cMultLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current}  '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.ui23.Ui23.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValueStringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary returns Expression:
		//    {ValueInt} value=INT | {ValueString} value=STRING | '(' Exp ')' | Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueInt} value=INT | {ValueString} value=STRING | '(' Exp ')' | Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ValueInt} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{ValueInt}
		public Action getValueIntAction_0_0() { return cValueIntAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{ValueString} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{ValueString}
		public Action getValueStringAction_1_0() { return cValueStringAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//'(' Exp ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2_1() { return cExpParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_3() { return cTypeParserRuleCall_3; }
	}
	
	
	private final UIElements pUI;
	private final FunctionElements pFunction;
	private final FormElements pForm;
	private final LayoutElements pLayout;
	private final ComponentElements pComponent;
	private final ElementElements pElement;
	private final LabelElements pLabel;
	private final InputTextElements pInputText;
	private final ButtonElements pButton;
	private final FormUseElements pFormUse;
	private final ParameterElements pParameter;
	private final TypeElements pType;
	private final ExpElements pExp;
	private final EqualityElements pEquality;
	private final CompareElements pCompare;
	private final ConcatElements pConcat;
	private final AddMinusElements pAddMinus;
	private final FactorElements pFactor;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Ui23GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUI = new UIElements();
		this.pFunction = new FunctionElements();
		this.pForm = new FormElements();
		this.pLayout = new LayoutElements();
		this.pComponent = new ComponentElements();
		this.pElement = new ElementElements();
		this.pLabel = new LabelElements();
		this.pInputText = new InputTextElements();
		this.pButton = new ButtonElements();
		this.pFormUse = new FormUseElements();
		this.pParameter = new ParameterElements();
		this.pType = new TypeElements();
		this.pExp = new ExpElements();
		this.pEquality = new EqualityElements();
		this.pCompare = new CompareElements();
		this.pConcat = new ConcatElements();
		this.pAddMinus = new AddMinusElements();
		this.pFactor = new FactorElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.ui23.Ui23".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UI:
	//    'title' title=ID
	//    functions += Function*
	//    forms += Form*
	//;
	public UIElements getUIAccess() {
		return pUI;
	}
	
	public ParserRule getUIRule() {
		return getUIAccess().getRule();
	}
	
	//Function:
	//    'function' name=ID '(' (types+=Type (',' types+=Type)*)? ')' ':' types+=Type
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Form:
	//    'form' name=ID ('('(parameters+=Parameter (',' parameters+=Parameter)*)?')')? '{' layout=Layout '}'
	//;
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}
	
	//Layout:
	//    ('row' | 'column') '{' components+=Component* '}'
	//;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//Component:
	//    Layout | Element | FormUse
	//;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Element:
	//    Label | InputText | Button
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Label:
	//    'label' ':' exp=Exp
	//;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//InputText:
	//    'input' name=ID ':' exp=Exp
	//;
	public InputTextElements getInputTextAccess() {
		return pInputText;
	}
	
	public ParserRule getInputTextRule() {
		return getInputTextAccess().getRule();
	}
	
	//Button:
	//    'button' '*'? name=ID ':' exp=Exp
	//;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//FormUse:
	//    name=ID '(' (exp=Exp (',' exp=Exp)*)? ')'
	//;
	public FormUseElements getFormUseAccess() {
		return pFormUse;
	}
	
	public ParserRule getFormUseRule() {
		return getFormUseAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=Type
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Type:
	//    {BoolType} 'boolean' | {StringType} 'string' | {NumberType} 'number'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Exp returns Expression:
	//    Equality (( {And.left=current} '&&' | {Or.left=current}  '||' ) right=Equality)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Equality returns Expression:
	//    Compare (( {EQ.left=current} '==' | {NEQ.left=current}  '!=' ) right=Compare)*
	//;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Compare returns Expression:
	//    Concat ((
	//        {LT.left=current}  '<'  |
	//        {LTE.left=current} '<=' |
	//        {GT.left=current}  '>'  |
	//        {GTE.left=current} '>='
	//    ) right=Concat)*
	//;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//Concat returns Expression:
	//    AddMinus (( {Conc.left=current} '&') right=AddMinus)*
	//;
	public ConcatElements getConcatAccess() {
		return pConcat;
	}
	
	public ParserRule getConcatRule() {
		return getConcatAccess().getRule();
	}
	
	//AddMinus returns Expression:
	//    Factor (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=Factor)*
	//;
	public AddMinusElements getAddMinusAccess() {
		return pAddMinus;
	}
	
	public ParserRule getAddMinusRule() {
		return getAddMinusAccess().getRule();
	}
	
	//Factor returns Expression:
	//    Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primary returns Expression:
	//    {ValueInt} value=INT | {ValueString} value=STRING | '(' Exp ')' | Type
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
