/**
 * generated by Xtext 2.34.0
 */
package dk.sdu.mmmi.mdsd.ui23.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.ui23.ui23.Component;
import dk.sdu.mmmi.mdsd.ui23.ui23.Form;
import dk.sdu.mmmi.mdsd.ui23.ui23.Layout;
import dk.sdu.mmmi.mdsd.ui23.ui23.UI;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Ui23Generator extends AbstractGenerator {
  private static Map<String, String> variables;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    HashMap<String, String> _hashMap = new HashMap<String, String>();
    Ui23Generator.variables = _hashMap;
    final UI ui = Iterators.<UI>filter(resource.getAllContents(), UI.class).next();
    String _title = ui.getTitle();
    String _plus = (_title + "/UserInterface");
    String _plus_1 = (_plus + ".java");
    fsa.generateFile(_plus_1, this.compileUserInterface(ui));
    String _title_1 = ui.getTitle();
    String _plus_2 = (_title_1 + "/BasicForm");
    String _plus_3 = (_plus_2 + ".java");
    fsa.generateFile(_plus_3, this.compileBasicForm(ui));
    fsa.generateFile((("common" + "/Form") + ".java"), this.compileCommonForm(ui));
  }

  /**
   * title Basic
   * 
   * form Basic {
   * column {
   * label : "My first form"
   * }
   * }
   */
  public CharSequence compileUserInterface(final UI ui) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package user_interface.basic;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class UserInterface{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JFrame frame;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void open() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("frame = new JFrame(\"");
    String _title = ui.getTitle();
    _builder.append(_title, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BasicForm form = new BasicForm(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("frame.add(form.createPanel());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("frame.pack();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("frame.setVisible(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compileBasicForm(final UI ui) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package user_interface.basic;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.append("import java.awt.event.*;");
    _builder.newLine();
    _builder.append("import user_interface.common.*;");
    _builder.newLine();
    {
      EList<Form> _forms = ui.getForms();
      for(final Form form : _forms) {
        _builder.newLine();
        _builder.append("public class BasicForm extends Form{");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("UserInterface parent;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("BasicForm(UserInterface parent) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("this.parent = parent;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public JPanel createPanel(){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return createPanel1();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public JPanel createPanel1() {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("JPanel panel = new JPanel();");
        _builder.newLine();
        _builder.append("\t\t");
        CharSequence _generateLayout = this.generateLayout(form.getLayout());
        _builder.append(_generateLayout, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("return panel;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public boolean checkValidity(){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return true;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }

  public CharSequence compileCommonForm(final UI ui) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package user_interface.common;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Form{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract boolean checkValidity();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract JPanel createPanel();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateLayout(final Layout layout) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));");
    _builder.newLine();
    {
      EList<Component> _components = layout.getComponents();
      for(final Component component : _components) {
        CharSequence _generateLayout = this.generateLayout(component);
        _builder.append(_generateLayout);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence generateLayout(final Component component) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("panel.add(new JLabel(\"My first form\"));");
    _builder.newLine();
    return _builder;
  }
}
