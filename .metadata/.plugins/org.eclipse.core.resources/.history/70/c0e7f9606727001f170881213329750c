/*
 * generated by Xtext 2.34.0
 */
package dk.sdu.mmmi.mdsd.ui23.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import dk.sdu.mmmi.mdsd.ui23.ui23.UI
import org.eclipse.xtext.xbase.testing.CompilationTestHelper

@ExtendWith(InjectionExtension)
@InjectWith(Ui23InjectorProvider)

class UiFormatTests {
	@Inject
	ParseHelper<UI> parseHelper
	
	@Test
	def void loadModel1() {
		val result = parseHelper.parse('''
			title Basic
			
			form Basic {
				column {
					label : "My first form"
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	@Test
	def void loadModel2() {
		val result = parseHelper.parse('''
			title Layout
			
			form Basic{
			    row {
			        label : "Left"
			        label : "Right"
			    }
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadModel3() {
		val result = parseHelper.parse('''
			title NestedLayout
			form Basic{
			    column {
			    	row {
			    		label : "Up Left"
			        	label : " Up Right"	
			    	}
			    	row {
			    		label : "Middle Left"
			    		label : "Middle Right"
			    		column {
			    			label : "One more"
			    			label : "Another more"
			    		}
			    	}
			    	label: "Very Down"
			    }
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadModel4() {
		val result = parseHelper.parse('''
			title Elements
			form Basic{
			    column {
			        label : "I am a label"
			        input name : string
			        button save : "Valid"
			    }
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadModel5() {
		val result = parseHelper.parse('''
			title Validation
			form Save{
			    column {
			    	row{
			    		label : "Name"
			    		input name : string	
			    	}
			    	row{
			    		label : "Age"
			    		input age : number > 18 && number <= 75	
			    	}
			    	row{
			    		label : "Password"
			    		input password: #string > 8	
			    	}
			    	row{
			    		label : "Repeat Password"
			    		input repeatPassword: password == string	
			    	}
			        row {
			        	button* save : "Save"
			        	button cancel : "Cancel"
			        }
			    }
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadModel6() {
		val result = parseHelper.parse('''
			title MultipleForms
			
			form RegisterStudent{
			    column {
			        label : "Registration"
			        PersonalInformation("Student")
			        UniversityInformation(3, 10)
			        button* save : "Save"
			    }
			}
			
			form PersonalInformation(name: string){
			    column{
			        label : "Fill with " & name & " Information"
			        row {
			        	label : "Name"
			            input firstName : string
			        }
			        row { 
			        	label : "Last Name"
			            input lastName : firstName != string
			        }
			        row {
			        	label : "Age"
			            input age : number > 18
			        }
			        InterestForm()
			    }
			}
			
			form UniversityInformation(acrLength: number, nameLength: number){
				column{
					label: "University Information"
					row {
						label: "University Name"
						input name: #string <= nameLength
					}
					row {
						label: "Acronym"
						input acr: acrLength >= #string
					}
				}
			}
			
			form InterestForm{
				column{
					row{
						label: "What do you want to learn?"
						input learn : #string >= 5
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadModel7() {
		val result = parseHelper.parse('''
			title External
			
			function validMail(string) : boolean
			
			form Information {
			    column {
			        row {
			        	label : "Name"
			        	input name : string
			        }
			        row{
			        	label : "Mail"
			        	input mail : validMail(string)
			        }
			        button* valid : 'Save'
			    }
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	@Test
	def void loadModel8() {
		val result = parseHelper.parse('''
			title FullExample
			
			function validMail(string) : boolean
			function validLike(number, string) : boolean
			
			form RegisterStudent{
			    column {
			        label : "Registration"
			        PersonalInformation("Student")
			        UniversityInformation(3, 10)
			        button* save : "Save"
			    }
			}
			
			form PersonalInformation(name: string){
			    column{
			        label : "Fill with " & name & " Information"
			        row {
			        	label : "Name"
			            input firstName : string
			        }
			        row { 
			        	label : "Last Name"
			            input lastName : firstName != string
			        }
			        row {
			        	label : "Age"
			            input age : number > 18
			        }
			        row {
			        	label : "Mail"
			            input mail : validMail(string)
			        }
			    }
			}
			
			form UniversityInformation(acrLength: number, nameLength: number){
				column{
					label: "University Information"
					row {
						label: "University Name"
						input name: #string <= nameLength
					}
					row {
						label: "Acronym"
						input acr: acrLength >= #string
					}
					LikeForm()
				}
			}
			
			form LikeForm{
				column{
					label : "Next questions will ask about your interests"
					row{
						label : "How many interests will you share?"
						input num : number
					}
					row {
			        	label : "What are your interests (space divided)?"
			        	input likes : #string >=0 && validLike(num, string)
			        }
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}

@ExtendWith(InjectionExtension)
@InjectWith(Ui23InjectorProvider)

class Ui23GenerationTest {
	@Inject	extension CompilationTestHelper
	
	@Test
	def void loadModel1() {
		'''
			title Basic
			
			form Basic {
				column {
					label : "My first form"
				}
			}
		'''.assertCompilesTo(
			'''
			MULTIPLE FILES WERE GENERATED
			
			File 1 : /myProject/./src-gen/Basic/BasicForm.java
			
			package user_interface.basic;
					
			import javax.swing.*;
			import java.awt.event.*;
			import user_interface.common.*;
			
			public class BasicForm extends Form{
			
				UserInterface parent;
				
				BasicForm(UserInterface parent) {
					this.parent = parent;
				}
			
				public JPanel createPanel(){
					return createPanel1();
				}
			
				public JPanel createPanel1() {
					JPanel panel = new JPanel();
					panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
					panel.add(new JLabel("My first form"));
					return panel;
				}
			
				public boolean checkValidity(){
					return true;
				}
			}
			
			File 2 : /myProject/./src-gen/Basic/UserInterface.java
			
			package user_interface.basic;
				
			import javax.swing.*;
			
			public class UserInterface{
				public JFrame frame;
			
				public void open() {
					frame = new JFrame("Basic");
					frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					BasicForm form = new BasicForm(this);
					frame.add(form.createPanel());
					frame.pack();
					frame.setVisible(true);
				}
			}
			
			File 3 : /myProject/./src-gen/common/Form.java
			
			package user_interface.common;
			
			import javax.swing.*;
			
			public abstract class Form{
				public abstract boolean checkValidity();
				public abstract JPanel createPanel();
			}
			
'''
		)
	}
}
