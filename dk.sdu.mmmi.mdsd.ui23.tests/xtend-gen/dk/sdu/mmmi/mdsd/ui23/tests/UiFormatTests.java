/**
 * generated by Xtext 2.34.0
 */
package dk.sdu.mmmi.mdsd.ui23.tests;

import com.google.inject.Inject;
import dk.sdu.mmmi.mdsd.ui23.ui23.UI;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(Ui23InjectorProvider.class)
@SuppressWarnings("all")
public class UiFormatTests {
  @Inject
  private ParseHelper<UI> parseHelper;

  @Test
  public void loadModel1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("title Basic");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form Basic {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("column {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("label : \"My first form\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final UI result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModel2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("title Layout");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form Basic{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("label : \"Left\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("label : \"Right\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final UI result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModel3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("title NestedLayout");
      _builder.newLine();
      _builder.append("form Basic{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("column {");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("label : \"Up Left\"");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \" Up Right\"\t");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("label : \"Middle Left\"");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("label : \"Middle Right\"");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("column {");
      _builder.newLine();
      _builder.append("    \t\t\t");
      _builder.append("label : \"One more\"");
      _builder.newLine();
      _builder.append("    \t\t\t");
      _builder.append("label : \"Another more\"");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("label: \"Very Down\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final UI result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModel4() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("title Elements");
      _builder.newLine();
      _builder.append("form Basic{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("column {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("label : \"I am a label\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("input name : string");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("button save : \"Valid\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final UI result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModel5() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("title Validation");
      _builder.newLine();
      _builder.append("form Save{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("column {");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("row{");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("label : \"Name\"");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("input name : string\t");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("row{");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("label : \"Age\"");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("input age : number > 18 && number <= 75\t");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("row{");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("label : \"Password\"");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("input password: #string > 8\t");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("row{");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("label : \"Repeat Password\"");
      _builder.newLine();
      _builder.append("    \t\t");
      _builder.append("input repeatPassword: password == string\t");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("button* save : \"Save\"");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("button cancel : \"Cancel\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final UI result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModel6() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("title MultipleForms");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form RegisterStudent{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("column {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("label : \"Registration\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("PersonalInformation(\"Student\")");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("UniversityInformation(3, 10)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("button* save : \"Save\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form PersonalInformation(name: string){");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("column{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("label : \"Fill with \" & name & \" Information\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Name\"");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("input firstName : string");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row { ");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Last Name\"");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("input lastName : firstName != string");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Age\"");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("input age : number > 18");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("InterestForm()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form UniversityInformation(acrLength: number, nameLength: number){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("column{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("label: \"University Information\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("label: \"University Name\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input name: #string <= nameLength");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("label: \"Acronym\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input acr: acrLength >= #string");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form InterestForm{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("column{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("row{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("label: \"What do you want to learn?\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input learn : #string >= 5");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final UI result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModel7() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("title External");
      _builder.newLine();
      _builder.newLine();
      _builder.append("function validMail(string) : boolean");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form Information {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("column {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Name\"");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("input name : string");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row{");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Mail\"");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("input mail : validMail(string)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("button* valid : \'Save\'");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final UI result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModel8() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("title FullExample");
      _builder.newLine();
      _builder.newLine();
      _builder.append("function validMail(string) : boolean");
      _builder.newLine();
      _builder.append("function validLike(number, string) : boolean");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form RegisterStudent{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("column {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("label : \"Registration\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("PersonalInformation(\"Student\")");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("UniversityInformation(3, 10)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("button* save : \"Save\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form PersonalInformation(name: string){");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("column{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("label : \"Fill with \" & name & \" Information\"");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Name\"");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("input firstName : string");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row { ");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Last Name\"");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("input lastName : firstName != string");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Age\"");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("input age : number > 18");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"Mail\"");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("input mail : validMail(string)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form UniversityInformation(acrLength: number, nameLength: number){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("column{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("label: \"University Information\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("label: \"University Name\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input name: #string <= nameLength");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("label: \"Acronym\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input acr: acrLength >= #string");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("LikeForm()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("form LikeForm{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("column{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("label : \"Next questions will ask about your interests\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("row{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("label : \"How many interests will you share?\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input num : number");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("row {");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("label : \"What are your interests (space divided)?\"");
      _builder.newLine();
      _builder.append("        \t");
      _builder.append("input likes : #string >=0 && validLike(num, string)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final UI result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
